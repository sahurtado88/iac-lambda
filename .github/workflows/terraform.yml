name: Terraform Infrastructure Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  terraform-check:
    name: Terraform Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init -backend=false
    
    - name: Terraform Validate
      run: terraform validate

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "TF_VAR_environment=prod" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=my-lambda-function-prod" >> $GITHUB_ENV
        else
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=my-lambda-function-dev" >> $GITHUB_ENV
        fi
    
    - name: Terraform Init
      run: terraform init
    
    - name: Check if SSM parameter exists
      id: check-ssm
      run: |
        if aws ssm get-parameter --name "/lambda/my-app/$TF_VAR_environment/image-uri" --region $AWS_REGION 2>/dev/null; then
          echo "ssm_exists=true" >> $GITHUB_OUTPUT
        else
          echo "ssm_exists=false" >> $GITHUB_OUTPUT
          # Create a placeholder parameter for initial deployment
          aws ssm put-parameter \
            --name "/lambda/my-app/$TF_VAR_environment/image-uri" \
            --value "placeholder" \
            --type "String" \
            --overwrite || true
        fi
    
    - name: Terraform Plan
      run: terraform plan -no-color
      continue-on-error: true
    
    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Plan ðŸ“–
          
          **Environment:** ${{ env.TF_VAR_environment }}
          **SSM Parameter Exists:** ${{ steps.check-ssm.outputs.ssm_exists }}
          
          <details><summary>Show Plan</summary>
          
          \`\`\`
          Plan output would be shown here in a real scenario
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-check
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "TF_VAR_environment=prod" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=my-lambda-function-prod" >> $GITHUB_ENV
        else
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=my-lambda-function-dev" >> $GITHUB_ENV
        fi
    
    - name: Terraform Init
      run: terraform init
    
    - name: Check if SSM parameter exists
      run: |
        if ! aws ssm get-parameter --name "/lambda/my-app/$TF_VAR_environment/image-uri" --region $AWS_REGION 2>/dev/null; then
          echo "Creating placeholder SSM parameter for initial deployment..."
          aws ssm put-parameter \
            --name "/lambda/my-app/$TF_VAR_environment/image-uri" \
            --value "placeholder" \
            --type "String"
        fi
    
    - name: Terraform Plan
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
    
    - name: Output important values
      run: |
        echo "### Deployment Complete! ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** $TF_VAR_environment" >> $GITHUB_STEP_SUMMARY
        echo "**Lambda Function:** $(terraform output -raw lambda_function_name)" >> $GITHUB_STEP_SUMMARY
        echo "**ECR Repository:** $(terraform output -raw ecr_repository_url)" >> $GITHUB_STEP_SUMMARY
        if [ "$(terraform output -raw lambda_function_url)" != "null" ]; then
          echo "**Function URL:** $(terraform output -raw lambda_function_url)" >> $GITHUB_STEP_SUMMARY
        fi

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: destruction
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "TF_VAR_environment=prod" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=my-lambda-function-prod" >> $GITHUB_ENV
        else
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          echo "TF_VAR_lambda_function_name=my-lambda-function-dev" >> $GITHUB_ENV
        fi
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Destroy
      run: terraform destroy -auto-approve